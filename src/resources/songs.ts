// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class Songs extends APIResource {
  /**
   * Creates a new song generation job using the provided lyrics. The lyrics must be
   * in English and cannot exceed 380 characters. The job will be queued for
   * processing and you can check its status using the getGeneratedSongById endpoint.
   */
  create(body: SongCreateParams, options?: RequestOptions): APIPromise<SongCreateResponse> {
    return this._client.post('/songs/create', { body, ...options });
  }

  /**
   * Retrieves the details and status of a specific song generation job. Returns null
   * if the song is not found or doesn't belong to the authenticated user.
   */
  retrieve(id: string, options?: RequestOptions): APIPromise<SongRetrieveResponse | null> {
    return this._client.get(path`/songs/${id}`, options);
  }

  /**
   * Returns a paginated list of all songs generated by the authenticated user,
   * sorted by creation date in descending order. Optionally filter results by title
   * search. You can paginate by passing the last song ID from the previous page.
   */
  list(
    query: SongListParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<SongListResponse> {
    return this._client.get('/songs', { query, ...options });
  }
}

export interface SongCreateResponse {
  id: string;
}

export interface SongRetrieveResponse {
  /**
   * Unique identifier for the song generation job
   */
  id: string;

  /**
   * Number of processing attempts made
   */
  attempt: number;

  /**
   * Timestamp when the job was created
   */
  createdAt: string;

  /**
   * Timestamp when processing completed
   */
  endTime: string | null;

  /**
   * The lyrics used to generate the song
   */
  lyrics: string;

  /**
   * URL to the generated song file
   */
  outputUrl: string | null;

  /**
   * Timestamp when processing started
   */
  startTime: string | null;

  /**
   * Current status of the song generation job
   */
  status: 'QUEUED' | 'PENDING_WORKER' | 'PROCESSING' | 'ERRORED' | 'SUCCEEDED' | 'CANCELED';

  /**
   * Timestamp when the job was last updated
   */
  updatedAt: string;

  /**
   * The prompt used to generate the song
   */
  prompt?: string;

  /**
   * Current position in the processing queue
   */
  queuePosition?: number | null;
}

export interface SongListResponse {
  songs: Array<SongListResponse.Song>;
}

export namespace SongListResponse {
  export interface Song {
    /**
     * Unique identifier for the song generation job
     */
    id: string;

    /**
     * Number of processing attempts made
     */
    attempt: number;

    /**
     * Timestamp when the job was created
     */
    createdAt: string;

    /**
     * Timestamp when processing completed
     */
    endTime: string | null;

    /**
     * The lyrics used to generate the song
     */
    lyrics: string;

    /**
     * URL to the generated song file
     */
    outputUrl: string | null;

    /**
     * Timestamp when processing started
     */
    startTime: string | null;

    /**
     * Current status of the song generation job
     */
    status: 'QUEUED' | 'PENDING_WORKER' | 'PROCESSING' | 'ERRORED' | 'SUCCEEDED' | 'CANCELED';

    /**
     * Timestamp when the job was last updated
     */
    updatedAt: string;

    /**
     * The prompt used to generate the song
     */
    prompt?: string;

    /**
     * Current position in the processing queue
     */
    queuePosition?: number | null;
  }
}

export interface SongCreateParams {
  /**
   * The lyrics for the song to be generated
   */
  lyrics: string;

  /**
   * The prompt for the style of the song
   */
  prompt: string;
}

export interface SongListParams {
  /**
   * Cursor for pagination to get the next page of results - this is the last item's
   * ID from the previous page
   */
  cursor?: string | null;

  /**
   * Number of items to return per page
   */
  limit?: number;

  search?: string | null;
}

export declare namespace Songs {
  export {
    type SongCreateResponse as SongCreateResponse,
    type SongRetrieveResponse as SongRetrieveResponse,
    type SongListResponse as SongListResponse,
    type SongCreateParams as SongCreateParams,
    type SongListParams as SongListParams,
  };
}
